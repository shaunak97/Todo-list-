{"version":3,"sources":["components/Todo.js","components/Form.js","components/FilterButton.js","App.js","index.js"],"names":["Todo","props","editFieldRef","useRef","editButtonRef","useState","isEditing","setEditing","newName","setNewName","editingTemplate","className","onSubmit","e","preventDefault","editTask","id","htmlFor","name","type","value","onChange","target","ref","onClick","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","Form","setName","addTask","autoComplete","FilterButton","aria-pressed","isPressed","setFilter","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","updatedTasks","map","remainingTasks","editedTaskList","taskList","key","filterList","tasksNoun","length","headingText","newTask","nanoid","role","aria-labelledby","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.955a1210.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\n\r\n\r\nexport default function Todo(props) {\r\n\r\n  const editFieldRef = useRef(null);\r\n  const editButtonRef = useRef(null);\r\n  const [isEditing, setEditing] = useState(false);\r\n  const [newName, setNewName] = useState('');\r\n\r\n  function handleChange(e) {\r\n    setNewName(e.target.value);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n  e.preventDefault();\r\n  props.editTask(props.id, newName);\r\n  setNewName(\"\");\r\n  setEditing(false);\r\n  }\r\n\r\n  const editingTemplate = (\r\n    <form className=\"stack-small\" onSubmit={handleSubmit}>\r\n      <div className=\"form-group\">\r\n        <label className=\"todo-label\" htmlFor={props.id}>\r\n          New name for {props.name}\r\n        </label>\r\n        <input id={props.id} className=\"todo-text\" type=\"text\" value={newName} onChange={handleChange} ref={editFieldRef}/>\r\n      </div>\r\n      <div className=\"btn-group\">\r\n        <button type=\"button\" className=\"btn todo-cancel\" onClick={() => setEditing(false)}>\r\n          Cancel\r\n          <span className=\"visually-hidden\">renaming {props.name}</span>\r\n        </button>\r\n        <button type=\"submit\" className=\"btn btn__primary todo-edit\">\r\n          Save\r\n          <span className=\"visually-hidden\">new name for {props.name}</span>\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n  const viewTemplate = (\r\n    <div className=\"stack-small\">\r\n      <div className=\"c-cb\">\r\n          <input\r\n            id={props.id}\r\n            type=\"checkbox\"\r\n            defaultChecked={props.completed}\r\n            onChange={() => props.toggleTaskCompleted(props.id)}\r\n          />\r\n          <label className=\"todo-label\" htmlFor={props.id}>\r\n            {props.name}\r\n          </label>\r\n        </div>\r\n        <div className=\"btn-group\">\r\n          <button type=\"button\" className=\"btn\" onClick={() => setEditing(true)} ref={editButtonRef}>\r\n          Edit <span className=\"visually-hidden\">{props.name}</span>\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn__danger\"\r\n            onClick={() => props.deleteTask(props.id)}\r\n          >\r\n            Delete <span className=\"visually-hidden\">{props.name}</span>\r\n          </button>\r\n        </div>\r\n    </div>\r\n  );\r\n\r\n  return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nfunction Form(props) {\r\n  const [name, setName] = useState(\"\");\r\n\r\n  function handleChange(e) {\r\n    setName(e.target.value);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    props.addTask(name);\r\n    setName(\"\");\r\n  }\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h2 className=\"label-wrapper\">\r\n      ToDo List\r\n        <label htmlFor=\"new-todo-input\" className=\"label__lg\">\r\n          What needs to be done?\r\n        </label>\r\n      </h2>\r\n      <input\r\n        type=\"text\"\r\n        id=\"new-todo-input\"\r\n        className=\"input input__lg\"\r\n        name=\"text\"\r\n        autoComplete=\"off\"\r\n        value={name}\r\n        onChange={handleChange}\r\n      />\r\n      <button type=\"submit\" className=\"btn btn__primary btn__lg\">\r\n        Add\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nfunction FilterButton(props) {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn toggle-btn\"\r\n      aria-pressed={props.isPressed}\r\n      onClick={() => props.setFilter(props.name)}\r\n    >\r\n      <span className=\"visually-hidden\">Show </span>\r\n      <span>{props.name}</span>\r\n      <span className=\"visually-hidden\"> tasks</span>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default FilterButton;\r\n","import { nanoid } from \"nanoid\"; //Nanoid helps to assign each new task with a new id\nimport React, { useState } from 'react';\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\"\nimport FilterButton from \"./components/FilterButton\"\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n\n  function addTask(name) {\n  const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n  setTasks([...tasks, newTask]);\n  }\n\n  function toggleTaskCompleted(id) {\n  const updatedTasks = tasks.map(task => {\n    // if this task has the same ID as the edited task\n    if (id === task.id) {\n      // use object spread to make a new object\n      // whose `completed` prop has been inverted\n      return {...task, completed: !task.completed}\n    }\n    return task;\n  });\n  setTasks(updatedTasks);\n}\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n  const editedTaskList = tasks.map(task => {\n  // if this task has the same ID as the edited task\n    if (id === task.id) {\n      //\n      return {...task, name: newName}\n    }\n    return task;\n  });\n  setTasks(editedTaskList);\n}\n\nconst taskList = tasks\n.filter(FILTER_MAP[filter])\n.map(task => (\n  <Todo\n    id={task.id}\n    name={task.name}\n    completed={task.completed}\n    key={task.id}\n    toggleTaskCompleted={toggleTaskCompleted}\n    deleteTask={deleteTask}\n    editTask={editTask}\n  />\n));\n\n  const filterList = FILTER_NAMES.map(name => (\n  <FilterButton\n    key={name}\n    name={name}\n    isPressed={name === filter}\n    setFilter={setFilter}\n    />\n  ));\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\nreturn (\n    <div className=\"todoapp stack-large\">\n      <Form addTask={addTask} />\n      <div className=\"filters btn-group stack-exception\">\n\n        {filterList}\n\n      </div>\n      <h2 id=\"list-heading\">{headingText}</h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nconst DATA = [\n {id: \"todo-0\", name: \"Eat\", completed: false },\n { id: \"todo-1\", name: \"Sleep\", completed: false },\n { id: \"todo-2\", name: \"Repeat\", completed: false }\n];\n\nReactDOM.render(<App tasks={DATA} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}